[
    {
        "apiSpeakerUrl": "https://api.github.com/users/bodil",
        "speakerUrl": "https://github.com/bodil",
        "title": "The Miracle of Generators",
        "description": "<p>The ECMAScript 2015 specification introduced <em>iterators</em>, which generalise iteration over common data structures, as well as providing an interface for allowing you to iterate over any custom data structures using common language constructs. ES2015 also introduced <em>generator functions</em>, which make writing arbitrary iterators a lot easier and less boilerplatey.&#13;&#10;&#13;&#10;But generators aren&#39;t just for making simple iterators over data structures. Because they&#39;re bidirectional&mdash;they don&#39;t only produce output, they can also take input&mdash;they&#39;re actually <em>coroutines</em>, which means there&#39;s no end to the sort of fun you can apply them to. We&#39;re going to explore how we can use them to make asynchronous programming in JavaScript a lot more elegant&mdash;to chart a path out of callback hell. And then we&#39;re going to take a look at what we&#39;ve really discovered: one of the most fearsome mysteries of computer science, suddenly laid bare before us.</p>\n",
        "milestone": "September 23rd 2015",
        "img": "https://avatars.githubusercontent.com/u/17880?v=3",
        "handle": "bodil",
        "name": "Bodil Stokke"
    },
    {
        "apiSpeakerUrl": "https://api.github.com/users/hassy",
        "speakerUrl": "https://github.com/hassy",
        "title": "Load-testing for fun and profit",
        "description": "<p>This talk will (briefly) outline why load-testing should be a part of your testing activities and then dive into an overview of tooling and strategies &amp; processes to get the most out of it when working on a production system. We&#39;ll also explore how load-testing can improve our understanding of both our own code and components that our code depends on.</p>\n",
        "milestone": "September 23rd 2015",
        "img": "https://avatars.githubusercontent.com/u/1490?v=3",
        "handle": "hassy",
        "name": "hassy veldstra"
    },
    {
        "apiSpeakerUrl": "https://api.github.com/users/burtonjc",
        "speakerUrl": "https://github.com/burtonjc",
        "title": "How Waffle.io separated its API from its core web app",
        "description": "<p>At Waffle.io, we recently built a public API to gain access to Waffle&#39;s data (in private beta now). We knew we wanted the API to be deployed, scaled, and monitored separately from our core app. We also wanted the app to use the same API we were providing to our users. Carving the API out as its own service consumed by our app provided some interesting challenges and produced some surprising benefits. This talk will describe the design we came up with, the challenges we faced, and the largely unexpected benefits we received.</p>\n",
        "milestone": "September 23rd 2015",
        "img": "https://avatars.githubusercontent.com/u/443084?v=3",
        "handle": "burtonjc",
        "name": "Jacob Burton"
    }
]